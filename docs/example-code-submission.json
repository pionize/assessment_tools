{
  "challengeId": "challenge-1",
  "type": "code",
  "assessmentId": "assessment-123",
  "candidateName": "John Doe",
  "candidateEmail": "john.doe@example.com",
  "files": {
    "src/App.jsx": "import React from 'react';\nimport UserList from './components/UserList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>User Management System</h1>\n      </header>\n      <main>\n        <UserList />\n      </main>\n    </div>\n  );\n}\n\nexport default App;",
    "src/components/UserList.jsx": "import React, { useState, useEffect } from 'react';\nimport { searchUsers } from '../utils/searchUtils';\n\nconst mockUsers = [\n  { id: 1, name: 'John Doe', email: 'john@example.com' },\n  { id: 2, name: 'Jane Smith', email: 'jane@example.com' },\n  { id: 3, name: 'Bob Johnson', email: 'bob@example.com' }\n];\n\nconst UserList = () => {\n  const [users, setUsers] = useState(mockUsers);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredUsers, setFilteredUsers] = useState(mockUsers);\n\n  useEffect(() => {\n    if (searchTerm.trim()) {\n      const filtered = searchUsers(users, searchTerm);\n      setFilteredUsers(filtered);\n    } else {\n      setFilteredUsers(users);\n    }\n  }, [searchTerm, users]);\n\n  return (\n    <div className=\"user-list\">\n      <h2>User List</h2>\n      <div className=\"search-container\">\n        <input\n          type=\"text\"\n          placeholder=\"Search users...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"search-input\"\n        />\n      </div>\n      <div className=\"users-grid\">\n        {filteredUsers.map(user => (\n          <div key={user.id} className=\"user-card\">\n            <h3>{user.name}</h3>\n            <p>{user.email}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default UserList;",
    "src/utils/searchUtils.js": "/**\n * Utility functions for searching and filtering users\n */\n\n/**\n * Search users by name, email, or other fields\n * @param {Array} users - Array of user objects\n * @param {string} searchTerm - Search term to filter by\n * @returns {Array} Filtered array of users\n */\nexport const searchUsers = (users, searchTerm) => {\n  if (!searchTerm || !users) return users;\n  \n  const term = searchTerm.toLowerCase().trim();\n  \n  return users.filter(user => {\n    return (\n      user.name.toLowerCase().includes(term) ||\n      user.email.toLowerCase().includes(term)\n    );\n  });\n};\n\n/**\n * Sort users by specified field\n * @param {Array} users - Array of user objects\n * @param {string} field - Field to sort by (name, email, etc.)\n * @param {string} direction - 'asc' or 'desc'\n * @returns {Array} Sorted array of users\n */\nexport const sortUsers = (users, field, direction = 'asc') => {\n  if (!users || !field) return users;\n  \n  return [...users].sort((a, b) => {\n    const aValue = a[field]?.toString().toLowerCase() || '';\n    const bValue = b[field]?.toString().toLowerCase() || '';\n    \n    if (direction === 'desc') {\n      return bValue.localeCompare(aValue);\n    }\n    return aValue.localeCompare(bValue);\n  });\n};",
    "src/tests/UserList.test.jsx": "import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport UserList from '../components/UserList';\n\n// Mock the search utils\njest.mock('../utils/searchUtils', () => ({\n  searchUsers: jest.fn((users, term) => {\n    if (!term) return users;\n    return users.filter(user => \n      user.name.toLowerCase().includes(term.toLowerCase())\n    );\n  })\n}));\n\ndescribe('UserList Component', () => {\n  test('renders user list title', () => {\n    render(<UserList />);\n    expect(screen.getByText('User List')).toBeInTheDocument();\n  });\n\n  test('should display users when provided', () => {\n    render(<UserList />);\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n    expect(screen.getByText('jane@example.com')).toBeInTheDocument();\n  });\n\n  test('should filter users based on search term', () => {\n    render(<UserList />);\n    const searchInput = screen.getByPlaceholderText('Search users...');\n    \n    fireEvent.change(searchInput, { target: { value: 'John' } });\n    \n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n  });\n\n  test('should handle empty user list gracefully', () => {\n    render(<UserList />);\n    const userCards = screen.getAllByRole('heading', { level: 3 });\n    expect(userCards.length).toBeGreaterThan(0);\n  });\n});",
    "src/tests/searchUtils.test.js": "import { searchUsers, sortUsers } from '../utils/searchUtils';\n\nconst mockUsers = [\n  { id: 1, name: 'John Doe', email: 'john@example.com' },\n  { id: 2, name: 'Jane Smith', email: 'jane@example.com' },\n  { id: 3, name: 'Bob Johnson', email: 'bob@example.com' }\n];\n\ndescribe('searchUsers', () => {\n  test('should return all users when search term is empty', () => {\n    const result = searchUsers(mockUsers, '');\n    expect(result).toEqual(mockUsers);\n  });\n\n  test('should filter users by name', () => {\n    const result = searchUsers(mockUsers, 'John');\n    expect(result).toHaveLength(2); // John Doe and Bob Johnson\n    expect(result[0].name).toBe('John Doe');\n    expect(result[1].name).toBe('Bob Johnson');\n  });\n\n  test('should filter users by email', () => {\n    const result = searchUsers(mockUsers, 'jane@');\n    expect(result).toHaveLength(1);\n    expect(result[0].email).toBe('jane@example.com');\n  });\n\n  test('should be case insensitive', () => {\n    const result = searchUsers(mockUsers, 'JOHN');\n    expect(result).toHaveLength(2);\n  });\n});\n\ndescribe('sortUsers', () => {\n  test('should sort users by name ascending', () => {\n    const result = sortUsers(mockUsers, 'name', 'asc');\n    expect(result[0].name).toBe('Bob Johnson');\n    expect(result[1].name).toBe('Jane Smith');\n    expect(result[2].name).toBe('John Doe');\n  });\n\n  test('should sort users by name descending', () => {\n    const result = sortUsers(mockUsers, 'name', 'desc');\n    expect(result[0].name).toBe('John Doe');\n    expect(result[1].name).toBe('Jane Smith');\n    expect(result[2].name).toBe('Bob Johnson');\n  });\n});",
    "config/development.json": "{\n  \"apiUrl\": \"http://localhost:3001\",\n  \"debugMode\": true,\n  \"logLevel\": \"debug\",\n  \"features\": {\n    \"userSearch\": true,\n    \"userSorting\": true,\n    \"userPagination\": false\n  },\n  \"ui\": {\n    \"theme\": \"light\",\n    \"itemsPerPage\": 10\n  }\n}",
    "config/production.json": "{\n  \"apiUrl\": \"https://api.yourapp.com\",\n  \"debugMode\": false,\n  \"logLevel\": \"error\",\n  \"features\": {\n    \"userSearch\": true,\n    \"userSorting\": true,\n    \"userPagination\": true\n  },\n  \"ui\": {\n    \"theme\": \"light\",\n    \"itemsPerPage\": 20\n  }\n}",
    "package.json": "{\n  \"name\": \"user-management-app\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/jest-dom\": \"^5.16.5\",\n    \"@testing-library/user-event\": \"^14.4.3\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}",
    "README.md": "# User Management Application\n\n## Overview\nThis is a React application for managing users with search and sorting capabilities.\n\n## Project Structure\n```\nsrc/\n├── components/\n│   └── UserList.jsx\n├── utils/\n│   └── searchUtils.js\n├── tests/\n│   ├── UserList.test.jsx\n│   └── searchUtils.test.js\n└── App.jsx\nconfig/\n├── development.json\n└── production.json\n```\n\n## Getting Started\n1. Install dependencies: `npm install`\n2. Start development server: `npm start`\n3. Run tests: `npm test`\n\n## Features\n- [x] User listing\n- [x] Search functionality (IMPLEMENTED)\n- [x] Sorting capabilities (IMPLEMENTED)\n- [x] Responsive design (BASIC)\n- [x] Unit tests (IMPLEMENTED)\n\n## Development Notes\nAll required features have been implemented with proper folder organization and comprehensive testing."
  },
  "language": "javascript",
  "timestamp": "2024-01-15T10:30:00Z"
}
